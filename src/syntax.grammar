@precedence { func_invoke, ident }

@top Statements { statement* }

@skip { space | LineComment }

kw<term> { @specialize[@name={term}]<Identifier, term> }

ckw<term> { @extend[@name={term}]<Identifier, term> }

statement {
  object |
  camera |
  config |
  var_assign |
  if |
  while_stmt |
  break |
  continue |
  expr
}

camera {
  Camera "{"
    (
      (ckw<"lookfrom"> ":" (vector | Identifier) ",") |
      (ckw<"lookat"> ":" (vector | Identifier) ",") |
      (ckw<"up"> ":" (vector | Identifier) ",") |
      (ckw<"angle"> ":" expr ",") |
      (ckw<"dist_to_focus"> ":" expr ",")
    )*
  "}"
}

config {
  Config "{"
    (
      (ckw<"width"> ":" expr ",") |
      (ckw<"height"> ":" expr ",") |
      (ckw<"samples_per_pixel"> ":" expr ",") |
      (ckw<"max_depth"> ":" expr ",") |
      (ckw<"background"> ":" (vector | Identifier) ",")
    )*
  "}"
}

var_assign { Identifier "=" expr ";" }

if { kw<"if"> expr "{" statement* "}" (kw<"else"> (("{" statement* "}") | if))? }

while_stmt { kw<"while"> expr "{" statement* "}" }

break { kw<"break"> ";" }

continue { kw<"continue"> ";" }

object { sphere | box | plane | objects }

sphere { 
    Sphere "{"
      (
        (ckw<"center"> ":" (vector | Identifier) "," ) |
        (ckw<"radius"> ":" expr "," ) |
        (ckw<"material"> ":" material ",") |
        affine
      )*
    "}"
}

box {
 Box "{"
    (
      (ckw<"vertex"> ":" "(" (vector | Identifier) "," (vector | Identifier) ")" "," ) |
      (ckw<"material"> ":" material ",") |
      affine
    )*
  "}"
}

plane {
  Plane "{"
    (
      (ckw<"vertex"> ":" "(" (vector | Identifier) "," (vector | Identifier) ")" "," ) |
      (ckw<"material"> ":" material ",") |
      affine
    )*
  "}"
}

objects { Objs "{" object+ affine* "}" }

affine {
  (ckw<"translate"> ":" (vector | Identifier) "," ) |
  (ckw<"rotateX"> ":" expr "," ) |
  (ckw<"rotateY"> ":" expr "," ) |
  (ckw<"rotateZ"> ":" expr "," )
}

material { metal | dielectric | lambertian | light }

metal { Metal "(" ( vector | Identifier ) "," expr ")" }

dielectric { Dielectric | "(" | expr | ")" }

lambertian { Lambertian | "(" texture ")" }

light { Light | "(" (vector | Identifier) "," expr ")" }

texture { perlin | checker | solid }

perlin { Perlin "(" expr ")" }

checker { Checker "(" texture "," texture ")" }

solid { Solid "(" (vector | Identifier) ")" }

expr { num_expr | cond }

cond {
  num_expr
  ("||" | "&&" | "<=" | ">=" | Lt | Gt | "==" | "!=") 
  num_expr
}

num_expr {
  term (("+" | "-") term)*
}

term {
  factor (("*" | Div) factor)*
}

factor {
  Number |
  vector |
  !func_invoke func |
  !ident Identifier |
  not_factor |
  ("(" expr ")")
}

func {
  Identifier "(" (expr ("," expr)*)? ")"
}

not_factor { "!" factor }

vector { VectorStart expr "," expr "," expr VectorEnd }

@tokens {
  Number { @digit+ ("." @digit+)? }

  Char { $[a-zA-Z_] }
  Identifier { Char (Char | @digit)* }

  LineComment { "//" ![\n]* }

  Div { "/" }

  @precedence { LineComment, Div }

  space { $[ \t\n\r]+ }

  "(" ")" "{" "}"

  @precedence { VectorStart, Lt }
  Lt { "<" }
  VectorStart { "<" }

  @precedence { VectorEnd, Gt }
  Gt { ">" }
  VectorEnd { ">" }

  @precedence {Camera, Config, Identifier}
  Camera {"Camera"}
  Config {"Config"}

  @precedence {Sphere, Box, Plane, Objs, Identifier}
  Sphere {"Sphere"}
  Box {"Box"}
  Plane {"Plane"}
  Objs {"Objs"}

  @precedence {Lambertian, Metal, Dielectric, Light, Identifier}
  Lambertian {"Lambertian"}
  Metal {"Metal"}
  Dielectric {"Dielectric"}
  Light {"Light"}

  @precedence {Solid, Checker, Perlin, Identifier}
  Solid {"Solid"}
  Checker {"Checker"}
  Perlin {"Perlin"}

  "break"
  "continue"

  "if"
  "else"
  "while"
}
