@precedence { func_invoke, ident }

@top Statements { statement* }

@skip { space | LineComment }

kw<term> { @specialize[@name={term}]<Identifier, term> }

statement {
  object |
  camera |
  config |
  var_assign |
  if |
  while_stmt |
  break |
  continue |
  expr
}

camera {
  Camera "{"
    (
      (Lookfrom ":" (vector | Identifier) ",") |
      (LookAt ":" (vector | Identifier) ",") |
      (Up ":" (vector | Identifier) ",") |
      (Angle ":" expr ",") |
      (DistToFocus ":" expr ",")
    )*
  "}"
}

config {
  Config "{"
    (
      (Width ":" expr ",") |
      (Height ":" expr ",") |
      (SamplesPerPixel ":" expr ",") |
      (MaxDepth ":" expr ",") |
      (Background ":" (vector | Identifier) ",")
    )*
  "}"
}

var_assign { Identifier "=" expr ";" }

if { kw<"if"> expr "{" statement* "}" (kw<"else"> (("{" statement* "}") | if))? }

while_stmt { kw<"while"> expr "{" statement* "}" }

break { kw<"break"> ";" }

continue { kw<"continue"> ";" }

object { sphere | box | plane | objects }

sphere { 
    Sphere "{"
      (
        (Center ":" (vector | Identifier) "," ) |
        (Radius ":" expr "," ) |
        (Material ":" material ",") |
        affine
      )*
    "}"
}

box {
 Box "{"
    (
      (Vertex ":" "(" (vector | Identifier) "," (vector | Identifier) ")" "," ) |
      (Material ":" material ",") |
      affine
    )*
  "}"
}

plane {
  Plane "{"
    (
      (Vertex ":" "(" (vector | Identifier) "," (vector | Identifier) ")" "," ) |
      (Material ":" material ",") |
      affine
    )*
  "}"
}

objects { Objs "{" object+ affine* "}" }

affine {
  (Translate ":" (vector | Identifier) "," ) |
  (RotateX ":" expr "," ) |
  (RotateY ":" expr "," ) |
  (RotateZ ":" expr "," )
}

material { metal | dielectric | lambertian | light }

metal { Metal "(" ( vector | Identifier ) "," expr ")" }

dielectric { Dielectric | "(" | expr | ")" }

lambertian { Lambertian | "(" texture ")" }

light { Light | "(" (vector | Identifier) "," expr ")" }

texture { perlin | checker | solid }

perlin { Perlin "(" expr ")" }

checker { Checker "(" texture "," texture ")" }

solid { Solid "(" (vector | Identifier) ")" }

expr { num_expr | cond }

cond {
  num_expr
  ("||" | "&&" | "<=" | ">=" | Lt | Gt | "==" | "!=") 
  num_expr
}

num_expr {
  term (("+" | "-") term)*
}

term {
  factor (("*" | Div) factor)*
}

factor {
  Number |
  vector |
  !func_invoke func |
  !ident Identifier |
  not_factor |
  ("(" expr ")")
}

func {
  Identifier "(" (expr ("," expr)*)? ")"
}

not_factor { "!" factor }

vector { VectorStart expr "," expr "," expr VectorEnd }

@tokens {
  Number { @digit+ ("." @digit+)? }

  Char { $[a-zA-Z_] }
  Identifier { Char (Char | @digit)* }

  LineComment { "//" ![\n]* }

  Div { "/" }

  @precedence { LineComment, Div }

  space { $[ \t\n\r]+ }

  "(" ")" "{" "}"

  @precedence { VectorStart, Lt }
  Lt { "<" }
  VectorStart { "<" }

  @precedence { VectorEnd, Gt }
  Gt { ">" }
  VectorEnd { ">" }

  @precedence {Camera, Config, Identifier}
  Camera {"Camera"}
  Config {"Config"}

  @precedence {Sphere, Box, Plane, Objs, Identifier}
  Sphere {"Sphere"}
  Box {"Box"}
  Plane {"Plane"}
  Objs {"Objs"}

  @precedence {Lambertian, Metal, Dielectric, Light, Identifier}
  Lambertian {"Lambertian"}
  Metal {"Metal"}
  Dielectric {"Dielectric"}
  Light {"Light"}

  @precedence {Solid, Checker, Perlin, Identifier}
  Solid {"Solid"}
  Checker {"Checker"}
  Perlin {"Perlin"}

  @precedence {
    Center,
    Radius,
    Vertex,
    Material,
    Translate,
    RotateX,
    RotateY,
    RotateZ,
    Lookfrom,
    LookAt,
    Up,
    Angle,
    DistToFocus,
    Width,
    Height,
    SamplesPerPixel,
    MaxDepth,
    Background,
    Identifier
  }

  // properties
  Center {"center"}
  Radius {"radius"}
  Vertex {"vertex"}
  Material {"material"}
  Translate {"translate"}
  RotateX {"rotateX"}
  RotateY {"rotateY"}
  RotateZ {"rotateZ"}
  Lookfrom {"lookfrom"}
  LookAt {"lookat"}
  Up {"up"}
  Angle {"angle"}
  DistToFocus {"dist_to_focus"}
  Width {"width"}
  Height {"height"}
  SamplesPerPixel {"samples_per_pixel"}
  MaxDepth {"max_depth"}
  Background {"background"}

  "break"
  "continue"

  "if"
  "else"
  "while"
}
